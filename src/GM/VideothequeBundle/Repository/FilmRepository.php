<?php

namespace GM\VideothequeBundle\Repository;

use GM\VideothequeBundle\Entity\Film;

/**
 * FilmRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FilmRepository extends \Doctrine\ORM\EntityRepository
{
    public function onReadBy($criteria = array(), $page = 1, $count = 10, $orderBy = null){ // put array option which contains ()
        $init_read = false;
        if($page < 1 || $count < 1){
            $init_read = true;
        }
        $limit = ($init_read) ? 1 :  $count;
        $offset = ($init_read) ? 1 : ($count * $page) - $count; // $count($page - 1)
        $init_read = false;
        $categories = $this->getEntityManager()->getRepository('GMVideothequeBundle:Film')
            ->findBy(
                $criteria,
                $orderBy,
                $limit,
                $offset
            );
        return $categories;
    }

    public function maxEntities(array $criteria = null){
        $owner_user_id = $criteria['owner'];
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('count(film.id)');
        $qb->from('GMVideothequeBundle:Film','film')->where("film.owner = :owner_user_id");
        $qb->setParameter('owner_user_id', $owner_user_id);
        $maxFilms = $qb->getQuery()->getSingleScalarResult();
        return $maxFilms;
    }

    public function maxFilmsDansUneCategorie(array $criteria = null){
        // SELECT count(id) FROM `film` where owner_user_id = 8 and categorie_id = 277;
        //'SELECT count(*) FROM region_table_name where region_param_i region_operator_condition_i region_param_i_value'
        //$query = 'SELECT count(*) FROM region_table_name where region_param_i = region_param_i_value';
        $owner_user_id = $criteria['owner'];
        $categorie_id = $criteria['categorie'];
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('count(film.id)');
        $qb->from('GMVideothequeBundle:Film','film')->where("film.owner = :owner_user_id")->andWhere("film.categorie = :categorie_id");
        $qb->setParameter('owner_user_id', $owner_user_id);
        $qb->setParameter('categorie_id', $categorie_id);
        $maxFilms = $qb->getQuery()->getSingleScalarResult();
        return $maxFilms;
    }

    public function onDeleteAll($owner_user_id, $batch_size = 20){
        $this->_em->getConnection()->getConfiguration()->setSQLLogger(null); 
        $offset = 0;
        $flag_delete_less_one_entity = false;
        $batch_has_alive = true;
        while ($batch_has_alive)
        {
            $batch_has_alive = false;
            $films = $this->createQueryBuilder('c')
               ->select('c')
               ->where("c.owner = :owner_user_id")
               ->setParameter('owner_user_id', $owner_user_id)
               ->setMaxResults( $batch_size )
               ->getQuery()
               ->setFirstResult($offset)
               ->setMaxResults($batch_size)
               ->getResult()
               
            ;
            $batch_has_alive = ($films != null) ? true : false ;
            foreach ($films as $film) {
                $em_remove = $this->_em->remove($film);
                $em_flush = $this->_em->flush(); // Executes all deletions.
                $flag_delete_less_one_entity = true;
            }
        }

        return $flag_delete_less_one_entity;
    }
}
